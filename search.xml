<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-butterfly</title>
      <link href="/2023/01/31/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/demo/"/>
      <url>/2023/01/31/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/demo/</url>
      
        <content type="html"><![CDATA[<!-- # DS and Algorithm -- Leetcode --><h2 id="经典模板"><a href="#经典模板" class="headerlink" title="经典模板"></a>经典模板</h2><h3 id="暴力枚举–双层for循环遍历"><a href="#暴力枚举–双层for循环遍历" class="headerlink" title="暴力枚举–双层for循环遍历"></a>暴力枚举–双层for循环遍历</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numSize; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; numSize; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br></pre></td></tr></table></figure><h3 id="定位-数组下表index"><a href="#定位-数组下表index" class="headerlink" title="定位(数组下表index)"></a>定位(数组下表index)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numSize;i++)&#123;</span><br><span class="line"><span class="comment">//退出循环时出现第一个不等的nums[i]</span></span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; nums[i]==nums[i--])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构基本操作的实现"><a href="#数据结构基本操作的实现" class="headerlink" title="数据结构基本操作的实现"></a>数据结构基本操作的实现</h2><h3 id="数组方面"><a href="#数组方面" class="headerlink" title="数组方面"></a>数组方面</h3><h4 id="swap交换"><a href="#swap交换" class="headerlink" title="swap交换"></a>swap交换</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//void swap(int nums[],int i,int j)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums,<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=nums[i];</span><br><span class="line">    nums[i]=nums[j];</span><br><span class="line">    nums[j]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reverse反转"><a href="#reverse反转" class="headerlink" title="reverse反转"></a>reverse反转</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">revese</span><span class="params">(<span class="type">int</span> nums[],<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;len/<span class="number">2</span>;i++)</span><br><span class="line">        <span class="built_in">swap</span>(nums,<span class="number">0</span>,len<span class="number">-1</span>-i);</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><h3 id="链表方面"><a href="#链表方面" class="headerlink" title="链表方面"></a>链表方面</h3><h4 id="reverse反转链表"><a href="#reverse反转链表" class="headerlink" title="reverse反转链表"></a>reverse反转链表</h4><h3 id="排序算法在链表方面上的实现"><a href="#排序算法在链表方面上的实现" class="headerlink" title="排序算法在链表方面上的实现"></a>排序算法在链表方面上的实现</h3><h4 id="直接插入-direct-insert"><a href="#直接插入-direct-insert" class="headerlink" title="直接插入(direct-insert)"></a>直接插入(direct-insert)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> *<span class="built_in">insertionSortList</span>(<span class="keyword">struct</span> ListNode *head) &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//new与malloc</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span> *dummyHead = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    dummyHead-&gt;val = <span class="number">0</span>;</span><br><span class="line">    dummyHead-&gt;next = head;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span> *lastSorted = head;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ListNode</span> *curr = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lastSorted-&gt;val &lt;= curr-&gt;val) &#123;</span><br><span class="line">            lastSorted = lastSorted-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">struct</span> ListNode *prev = dummyHead;</span><br><span class="line">            <span class="keyword">while</span> (prev-&gt;next-&gt;val &lt;= curr-&gt;val) &#123;</span><br><span class="line">                prev = prev-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            lastSorted-&gt;next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev-&gt;next;</span><br><span class="line">            prev-&gt;next = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = lastSorted-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的设计与实现"><a href="#栈的设计与实现" class="headerlink" title="栈的设计与实现"></a>栈的设计与实现</h3><h4 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h4><h2 id="线性表专题-数组与哈希表-链表"><a href="#线性表专题-数组与哈希表-链表" class="headerlink" title="线性表专题(数组与哈希表,链表)"></a>线性表专题(数组与哈希表,链表)</h2><h3 id="2-两数之和"><a href="#2-两数之和" class="headerlink" title="2.两数之和"></a>2.两数之和</h3><blockquote><p>查询一个元素是否在集合中(或者是否出现过)常常使用哈希表</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接使用哈希表.对于每一个val,能用O(1)找到remain,最多O(n);O(n)空间构造HashMap()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(target-nums[i])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;i,map.get(target-nums[i])&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(val, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = map.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (it != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ListNode* removeNthFromEnd(ListNode* head, <span class="type">int</span> n) &#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* first = head;</span><br><span class="line">        ListNode* second = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (first) &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">            second = second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        second-&gt;next = second-&gt;next-&gt;next;</span><br><span class="line">        ListNode* ans = dummy-&gt;next;</span><br><span class="line">        delete dummy;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h3><ul><li>new dummy(cur),(二者均非空时)在while循环中分别指向list1.val与list2.val中的min值</li><li>退出循环时,最多有一个链表不为空</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode* cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">                cur-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev-&gt;next = l1 == <span class="literal">nullptr</span> ? l2 : l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><blockquote><p>双指针涵盖的范围很广,(访问数组下标志也是通过索引来实现的)包括左右(索引or快慢),滑动窗口,扫描线等</p></blockquote><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快慢双指针(or 一个用来工作赋值,另一个用来做判断)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (numsSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fast = <span class="number">1</span>, slow = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast &lt; numsSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != nums[fast - <span class="number">1</span>]) &#123;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            ++slow;</span><br><span class="line">        &#125;</span><br><span class="line">        ++fast;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断环形链表"><a href="#判断环形链表" class="headerlink" title="判断环形链表"></a>判断环形链表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">hasCycle</span><span class="params">(ListNode *head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">fast</span>=</span>head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">slow</span>=</span>head;</span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        fast=fast-&gt;next-&gt;next;</span><br><span class="line">        slow=slow-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(fast==slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表匹配是否包含"><a href="#链表匹配是否包含" class="headerlink" title="链表匹配是否包含"></a>链表匹配是否包含</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool is_child(linklist A,linklist B)&#123;</span><br><span class="line">    while(A!=NULL)&#123;</span><br><span class="line">        if(A-&gt;val==B-&gt;val)&#123;</span><br><span class="line">            linklist tempA=A-&gt;next;</span><br><span class="line">            linklist tempB=B-&gt;next;</span><br><span class="line">            while(tempA&amp;&amp;tempB)&#123;</span><br><span class="line">                    if(tempA-&gt;val==tempB-&gt;val) </span><br><span class="line">                    tempA=temp-&gt;next;tempB=tempB-&gt;next;</span><br><span class="line">                    else break;</span><br><span class="line">                &#125;</span><br><span class="line">            if(tempB==NULL) return true;</span><br><span class="line">        &#125;</span><br><span class="line">        A=A-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找与归并排序"><a href="#二分查找与归并排序" class="headerlink" title="二分查找与归并排序"></a>二分查找与归并排序</h2><blockquote><p>LeetCode-4:寻找两个正序数组的中位数</p></blockquote><h2 id="快速排序解决问题"><a href="#快速排序解决问题" class="headerlink" title="快速排序解决问题"></a>快速排序解决问题</h2><h2 id="LeetCode原题"><a href="#LeetCode原题" class="headerlink" title="LeetCode原题"></a>LeetCode原题</h2><h3 id="41-缺失的第一个正数"><a href="#41-缺失的第一个正数" class="headerlink" title="41.缺失的第一个正数"></a>41.缺失的第一个正数</h3><blockquote><p>最小未出现的正数只可能在1,2….n,n+1中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int firstMissingPositive(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int len=nums.size();</span><br><span class="line">        //相当于手动用数组构建出一个哈希表</span><br><span class="line">        //最小的正数用1,2,....一直到n之间就可以判断出</span><br><span class="line">        //nums[i]=i+1为正确位置;即val=i+1应该被放在i的索引</span><br><span class="line">        for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">            //idx=nums[i]-1与i是否正确</span><br><span class="line">            while(nums[i]&gt;=1 &amp;&amp; nums[i]&lt;=len &amp;&amp; nums[i]!=nums[nums[i]-1])&#123;</span><br><span class="line">                swap(nums,i,nums[i]-1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">            if(nums[i]!=i+1) return i+1;</span><br><span class="line">        &#125;</span><br><span class="line">        return len+1;</span><br><span class="line">    &#125;</span><br><span class="line">    void swap(vector&lt;int&gt;&amp; nums,int i,int j)&#123;</span><br><span class="line">        int temp=nums[i];</span><br><span class="line">        nums[i]=nums[j];</span><br><span class="line">        nums[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>five</title>
      <link href="/2023/01/31/five/"/>
      <url>/2023/01/31/five/</url>
      
        <content type="html"><![CDATA[<p>#include&lt;stdio.h&gt;<br>int main(){<br>    int a&#x3D;10;<br>    printf(“%d\n”,a);<br>    return 0;<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fourfoo.md</title>
      <link href="/2023/01/30/fourfoo-md/"/>
      <url>/2023/01/30/fourfoo-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>新建了一个hexoline分支后竟然就能用了啊</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>threeeach.md</title>
      <link href="/2023/01/30/threeeach-md/"/>
      <url>/2023/01/30/threeeach-md/</url>
      
        <content type="html"><![CDATA[<h2 id="git的分支的拉取不懂master-or-main每次都要pull吗"><a href="#git的分支的拉取不懂master-or-main每次都要pull吗" class="headerlink" title="git的分支的拉取不懂master or main每次都要pull吗????"></a>git的分支的拉取不懂<br>master or main<br>每次都要pull吗<br>????</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二.md</title>
      <link href="/2023/01/30/%E7%AC%AC%E4%BA%8C-md/"/>
      <url>/2023/01/30/%E7%AC%AC%E4%BA%8C-md/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/01/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 我的第一篇博客<br>date: 2023-01-30 13:08:44<br>tag:</p><h1 id="我的第一篇博客文章"><a href="#我的第一篇博客文章" class="headerlink" title="我的第一篇博客文章"></a>我的第一篇博客文章</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h2 id="Hexo在windows上搭建hexo博客"><a href="#Hexo在windows上搭建hexo博客" class="headerlink" title="Hexo在windows上搭建hexo博客"></a>Hexo在windows上搭建hexo博客</h2><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><ul><li>nodejs,git,npm</li><li>npm安装hexo</li><li>相应指令安装既可<blockquote><p>貌似也还好啊</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/30/hello-world/"/>
      <url>/2023/01/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
